 interface Person {
  @deprecation "This is a comment over an interface"
  @doc "This is a comment over an interface"
  @lang/dot color lightyellow

  name: String {
    @doc "You can also document fields inside the interface"
  }
}

//@lang/lacinia resolver resolve-name

type Employee : Person {
  @lang/dot color navajowhite

  salary: Float
  status: RelationshipStatus
  profession: Profession?
  changeSalary(newSalary: Float): Float
  {
    @doc "Changes the salary of an employee"
  }
  friends: String[0..4]
  address: String
  {
      @lang/lacinia resolver resolve-name
      @lang/graphql resolver resolve-name2
      @doc "This is a comment"
      @deprecation "This was deprecated"
  }
}

enum RelationshipStatus {
  @lang/dot color lightblue
  @deprecation "This enum is also deprecated"
  @doc "This is a comment above an enum"

  Single
  Married
}

type QueryRoot {
  @lang/lacinia identifier query
  @doc "An employee inherits from Person"

  unionQuery(): UnionType
  getFriends(): Person[0..n] {
    @doc "This is a documentation inside a query field"
  }
}

type MutationRoot {
  @lang/lacinia identifier mutation
  @doc "This is a comment above a mutation"
  @lang/dot color aquamarine

  mutation: string {
    @doc "I can also add documentaiton here"
  }
}

enum UnionType {
  @lang/lacinia identifier union
  @lang/graphql identifier union
  @doc "This is an union type"

  Person
  Profession
}

diagram fixture {
  (QueryRoot)!
}
