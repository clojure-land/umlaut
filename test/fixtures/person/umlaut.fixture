{:nodes
 {"Person"
  [:interface
   {:id "Person",
    :fields
    [{:id "name",
      :return {:type-id "String", :arity [1 1], :required true},
      :params [],
      :params? false,
      :field-annotations
      {:documentation
       "You can also document fields inside the interface"}}],
    :parents [],
    :annotations
    [{:space :deprecation,
      :key "",
      :value "This is a comment over an interface"}
     {:space :documentation,
      :key "",
      :value "This is a comment over an interface"}
     {:space "lang/dot", :key "color", :value "lightyellow"}]}],
  "Employee"
  [:type
   {:id "Employee",
    :fields
    [{:id "salary",
      :return {:type-id "Float", :arity [1 1], :required true},
      :params [],
      :params? false,
      :field-annotations {}}
     {:id "status",
      :return
      {:type-id "RelationshipStatus", :arity [1 1], :required true},
      :params [],
      :params? false,
      :field-annotations {}}
     {:id "profession",
      :return {:type-id "Profession", :arity [1 1], :required false},
      :params [],
      :params? false,
      :field-annotations {}}
     {:id "changeSalary",
      :return {:type-id "Float", :arity [1 1], :required true},
      :params
      [{:type-id "Float",
        :arity [1 1],
        :id "newSalary",
        :relationship-type :attribute,
        :required true}],
      :params? true,
      :field-annotations
      {:documentation "Changes the salary of an employee"}}
     {:id "friends",
      :return {:type-id "String", :arity [0 4], :required true},
      :params [],
      :params? false,
      :field-annotations {}}
     {:id "address",
      :return {:type-id "String", :arity [1 1], :required true},
      :params [],
      :params? false,
      :field-annotations
      {:others
       [{:space "lang/lacinia", :key "resolver", :value "resolve-name"}
        {:space "lang/graphql",
         :key "resolver",
         :value "resolve-name2"}],
       :documentation "This is a comment",
       :deprecation "This was deprecated"}}],
    :parents [{:type-id "Person"}],
    :annotations
    [{:space "lang/dot", :key "color", :value "navajowhite"}]}],
  "RelationshipStatus"
  [:enum
   {:id "RelationshipStatus",
    :values ("Single" "Married"),
    :annotations
    [{:space "lang/dot", :key "color", :value "lightblue"}
     {:space :deprecation,
      :key "",
      :value "This enum is also deprecated"}
     {:space :documentation,
      :key "",
      :value "This is a comment above an enum"}]}],
  "QueryRoot"
  [:type
   {:id "QueryRoot",
    :fields
    [{:id "unionQuery",
      :return {:type-id "UnionType", :arity [1 1], :required true},
      :params [],
      :params? false,
      :field-annotations {}}
     {:id "getFriends",
      :return {:type-id "Person", :arity [0 "n"], :required true},
      :params [],
      :params? false,
      :field-annotations
      {:documentation
       "This is a documentation inside a query field (with parenthesis in the comment)"}}],
    :parents [],
    :annotations
    [{:space "lang/lacinia", :key "identifier", :value "query"}
     {:space :documentation,
      :key "",
      :value "An employee inherits from Person"}]}],
  "MutationRoot"
  [:type
   {:id "MutationRoot",
    :fields
    [{:id "mutation",
      :return {:type-id "String", :arity [1 1], :required true},
      :params [],
      :params? false,
      :field-annotations
      {:documentation
       "Test comment with special characters: (with [with {with ()}]){}[]...+-*/\\^%&$#@!?"}}],
    :parents [],
    :annotations
    [{:space "lang/lacinia", :key "identifier", :value "mutation"}
     {:space :documentation,
      :key "",
      :value "This is a comment above a mutation ([]{-})"}
     {:space "lang/dot", :key "color", :value "aquamarine"}]}],
  "SubscriptionRoot"
  [:type
   {:id "SubscriptionRoot",
    :fields
    [{:id "getMessages",
      :return {:type-id "String", :arity [0 "n"], :required true},
      :params
      [{:type-id "String",
        :arity [1 1],
        :id "roomId",
        :relationship-type :attribute,
        :required true}],
      :params? true,
      :field-annotations
      {:others
       [{:space "lang/lacinia",
         :key "stream",
         :value "stream-messages"}]}}
     {:id "getLogs",
      :return {:type-id "String", :arity [0 "n"], :required true},
      :params [],
      :params? false,
      :field-annotations
      {:others
       [{:space "lang/lacinia",
         :key "stream",
         :value "stream-logs"}]}}],
    :parents [],
    :annotations
    [{:space "lang/lacinia",
      :key "identifier",
      :value "subscription"}]}],
  "UnionType"
  [:enum
   {:id "UnionType",
    :values ("Person" "Profession"),
    :annotations
    [{:space "lang/lacinia", :key "identifier", :value "union"}
     {:space "lang/graphql", :key "identifier", :value "union"}
     {:space :documentation,
      :key "",
      :value "This is an union type"}]}],
  "Profession"
  [:type
   {:id "Profession",
    :fields
    [{:id "name",
      :return {:type-id "String", :arity [1 1], :required true},
      :params [],
      :params? false,
      :field-annotations {}}],
    :parents [],
    :annotations []}]},
 :diagrams
 {"fixture" [:diagram {:id "fixture", :groups [["QueryRoot" "!"]]}]}}
