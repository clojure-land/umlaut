// Foundational types

@lang/dot color forestgreen
interface RootNode {
  id: ID {
    @doc "Relay-specific opaque ID of this entity. It must always return the same entity as represented by the server at that request time."
  }
}

type Version {
  systemId: String {
    @doc "The ID of the system this version refers to"
  }
  description: String? {
    @doc "A free-form description of the system this version refers to"
  }
  semver: String {
    @doc "The semver version of the system"
  }
}

@lang/dot color gold
type ViewerNode : RootNode {
  carouselItems(storeId: ID?): CarouselItemNode[1..n]
  stores(locationSearch: LocationSearchInput?): StoreNode[0..n] {
    @lang/lacinia resolver resolve-stores
  }
  versions: Version[0..n]
  cities: CityNode[0..n] {
    @lang/lacinia resolver resolve-cities
  }
  productsCatalog(storeId: ID?): ProductNode[0..n]
}

// Location types

@lang/lacinia identifier input
type LocationSearchInput {
  latitude: Float
  longitude: Float
  radius: Float
}

// Store types

@lang/dot color crimson
type StoreNode : RootNode {
  name: String
  address: String
  city: String {
    @lang/lacinia resolver resolve-city
  }
  phone: String
  monFriHours: String
  satSunHours: String
  latitude: Float
  longitude: Float
  distance: Float?
}

type CityNode : RootNode {
  name: String
  stores: StoreNode[0..n] {
    @lang/lacinia resolver resolve-stores
  }
}

@lang/lacinia identifier union
@lang/graphql identifier union
@lang/dot color forestgreen
enum VariantNode {
  VariantSizeNode VariantCreamNode VariantSweetenerNode
}

@lang/lacinia identifier union
@lang/graphql identifier union
enum CarouselItemNode {
  CarouselRecommendationNode CarouselFavoriteNode CarouselOrderNode
}

@lang/dot color forestgreen
enum CreamAmount {
  EXTRA MEDIUM LIGHT NONE
}

@lang/dot color forestgreen
enum SweetenerAmount {
  EXTRA MEDIUM LIGHT NONE
}

@lang/dot color forestgreen
enum SizeType {
  LARGE SMALL
}

@lang/dot color forestgreen
enum SweetenerType {
  SUGAR HONEY SPLENDA STEVIA SWEETNLOW EQUAL
}

@lang/dot color forestgreen
enum CreamType {
  CREAM WHOLE TWO_PERCENT LOW_FAT NON_FAT ALMOND SOY VANILLA_SOY
}

@lang/dot color forestgreen
type ProductNode : RootNode {
  name: String
  imageUrl: String
  backgroundColor: String
  foregroundColor: String
  textFormatter: String
  availableVariants: VariantNode[1..n]
  selectedVariants: VariantNode[0..n]
  defaultVariants: VariantNode[1..n]
  description: String
  // mint, cardamom...etc.
  productFlags: ProductFlagNode[0..n]
  specialInstructions: String?
  price: Float
  isAvailable: Boolean
  productType: ProductType
  blendType: BlendType
}

@lang/dot color forestgreen
enum BlendType {
  DARK MEDIUM LIGHT ICED DECAF TEA
}

@lang/dot color forestgreen
enum ProductType {
  COFFEE TEA
}

@lang/dot color forestgreen
type VariantSizeNode : RootNode {
  type: SizeType
}

@lang/dot color forestgreen
type VariantCreamNode : RootNode {
  amount: CreamAmount
  type: CreamType
}

@lang/dot color forestgreen
type VariantSweetenerNode : RootNode {
  amount: SweetenerAmount
  type: SweetenerType
}

@lang/dot color forestgreen
type CarouselRecommendationNode : RootNode {
  title: String
  description: String
  product: ProductNode
  estimates(limit: Integer?): String[0..n] {
    @doc "given a number of items, you get a collection of times in string RFC3339 format, of estimates that a user can pick their order."
    @lang/lacinia resolver resolve-estimates
  }
}

@lang/dot color forestgreen
type CarouselFavoriteNode : RootNode {
  title: String
  description: String
  products: ProductNode[1..n]
  estimates(limit: Integer?): String[0..n] {
    @doc "given a number of items, you get a collection of times in string RFC3339 format, of estimates that a user can pick their order."
    @lang/lacinia resolver resolve-estimates
  }
}

@lang/dot color gold
type CarouselOrderNode : RootNode {
  title: String
  description: String
  products: ProductNode[1..n]
  orderStatus: OrderStatus
  baristaImageUrl: String
  store: StoreNode
  orderPickUpTime: String // RFC3339 format.
}

@lang/dot color gold
enum OrderStatus {
  UNASSIGNED ASSIGNED READY CANCELLED
}

@lang/dot color forestgreen
type ProductFlagNode : RootNode {
  iconUrl: String
  name: String
}

// Feedbacks

enum RateType {
  HAPPY UNHAPPY
}

type RateNode : RootNode {
  order: OrderNode?
  rateType: RateType
}

type Feedback {
  comments: String
}

// Order types

type CartNode : RootNode {
  products: ProductNode[1..n]
  totalCount: Integer
  totalPrice: Float
  totalTax: Float
}

type OrderNode : RootNode {
  products: ProductNode[1..n]
  totalCount: Integer
  totalPrice: Float
  totalTax: Float
}

// Putting it all together

@lang/dot color gold
@lang/lacinia identifier query
type QueryRoot {
  viewer: ViewerNode? {
    @lang/lacinia resolver resolve-viewer
  }
  node(id: ID): RootNode? {
    @lang/lacinia resolver resolve-node
  }
}

@lang/lacinia identifier mutation
type MutationRoot {
  rateOrder(orderId: ID, rate: RateType): RateNode
  feedback(rateId: ID?, comments: String): Feedback
}

diagram Products {
  (ProductNode CarouselRecommendationNode CarouselFavoriteNode CarouselOrderNode)!
  (VariantSizeNode VariantCreamNode VariantSweetenerNode)!
  (QueryRoot ViewerNode RootNode)
}
