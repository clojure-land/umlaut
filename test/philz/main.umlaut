@lang/dot color olivedrab1
interface RootNode {
  id: ID {
    @doc "Relay-specific opaque ID of this entity. It must always return the same entity as represented by the server at that request time."
  }
}

@lang/dot color olivedrab1
type Version {
  systemId: String {
    @doc "The ID of the system this version refers to"
  }
  description: String? {
    @doc "A free-form description of the system this version refers to"
  }
  semver: String {
    @doc "The semver version of the system"
  }
  queue: String {
    @doc "The version of the queue service"
  }
}

@lang/dot color olivedrab1
@doc "Defines the type of the image that can be fetched."
enum ImageType {
  PNG SVG
}

@lang/dot color olivedrab1
@doc "Speficifies the size of the image that can be fetched. The standard follows the Human Interface Guidelines from Apple"
enum ImageSizeType {
  SIZE_3X SIZE_2X SIZE_1X
}

@lang/dot color olivedrab1
@doc "Represent a combination of image type, size, and URL to fetch the particular image asset."
type Image {
  type: ImageType {
    @doc "The type of the image."
  }
  sizeType: ImageSizeType {
    @doc "The size of the image."
  }
  url: String {
    @doc "The URL where the image can be fetched from."
    @lang/spec validator validate-url
  }
}

@lang/dot color olivedrab1
@doc "Top level node for any information that is customer dependent."
type CustomerNode : RootNode {
  carouselItems: CarouselItemNode[1..n]
}

@lang/dot color lightgoldenrod1
@lang/lacinia identifier input
type LocationSearchInput {
  latitude: Float
  longitude: Float
  radius: Float
}

@lang/dot color lightgoldenrod1
@doc "Represents a store object, prop-types subject to change.."
type StoreNode : RootNode {
  name: String
  address: String
  city: String
  phone: String
  openingHours: StoreHours[7..7]
  latitude: Float
  longitude: Float
  image: Image
  distance: Float?
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

type StoreHours {
  dayOfWeek: DayOfWeek
  isOpen: Boolean
  hours: String
}

@lang/dot color olivedrab1
type CityNode : RootNode {
  name: String
  stores: StoreNode[0..n]
}

@lang/lacinia identifier union
@lang/graphql identifier union
@lang/dot color olivedrab1
enum VariantNode {
  VariantSizeNode VariantCreamNode VariantSweetenerNode
}

@lang/dot color olivedrab1
enum CreamAmount {
  EXTRA MEDIUM LIGHT NONE
}

@lang/dot color olivedrab1
enum SweetenerAmount {
  EXTRA MEDIUM LIGHT NONE
}

@lang/dot color olivedrab1
enum SizeType {
  LARGE SMALL
}

@lang/dot color olivedrab1
enum SweetenerType {
  SUGAR HONEY SPLENDA STEVIA SWEETNLOW EQUAL
}

@lang/dot color olivedrab1
enum CreamType {
  CREAM WHOLE TWO_PERCENT LOW_FAT NON_FAT ALMOND SOY VANILLA_SOY
}

type Test {
  a: String?
  b: String[1..5]?
  c: String
  d: String[1..5]
}

@lang/dot color olivedrab1
@doc "Represents one product in the Menu, or one of many underlying products in a carousel item."
@lang/spec validator validate-product
type ProductNode : RootNode {
  name: String
  image: Image[1..n]
  backgroundColor: String {
    @lang/spec validator validate-color
  }
  foregroundColor: String {
    @lang/spec validator validate-color
  }
  textFormatter: String
  availableVariants: VariantNode[1..n]
  selectedVariants: VariantNode[0..n]
  defaultVariants: VariantNode[1..n]
  description: String
  // mint, cardamom...etc.
  productFlags: ProductFlagNode[0..n]
  specialInstructions: String?
  price: Float
  isAvailable: Boolean
  productType: ProductType
  blendType: BlendType
}

@lang/dot color olivedrab1
enum BlendType {
  DARK MEDIUM LIGHT ICED DECAF TEA MORE
}

@lang/dot color olivedrab1
enum ProductType {
  COFFEE TEA
}

@lang/dot color olivedrab1
@lang/spec validator validate-variant-size-node
type VariantSizeNode : RootNode {
  type: SizeType
  additionalPrice: Float
}

@lang/dot color olivedrab1
type VariantCreamNode : RootNode {
  amount: CreamAmount
  type: CreamType
}

@lang/dot color olivedrab1
type VariantSweetenerNode : RootNode {
  amount: SweetenerAmount
  type: SweetenerType
}

@doc "Represents a carousel item on the home screen. Note that a carousel items are not identical in data shape because they can be an order, or a favorite item."
@lang/dot color olivedrab1
interface CarouselItemNode {
  title: String
  description: String?
  products: ProductNode[1..n]
}

@lang/dot color olivedrab1
@doc "A Carousel Recommendation, is an API-recomennded product. When the user downloads the app for the first time, all carousel items will be of this type because the user has not made any orders and does not have any favorites."
type CarouselRecommendationNode : RootNode CarouselItemNode {
  isAvailable(storeId: ID?): Boolean
  estimates(storeId: ID?, limit: Integer?): String[0..n] {
    @doc "given a number of items, you get a collection of times in string RFC3339 format, of estimates that a user can pick their order."
    @lang/lacinia resolver resolve-estimates
    @lang/spec validator validate-estimates
  }
}

@lang/dot color olivedrab1
@doc "This node can be thought of a previously ordered bundle"
type CarouselFavoriteNode : RootNode CarouselItemNode {
  isAvailable(storeId: ID?): Boolean
  estimates(storeId: ID?, limit: Integer?): String[0..n] {
    @doc "given a number of items, you get a collection of times in string RFC3339 format, of estimates that a user can pick their order."
    @lang/lacinia resolver resolve-estimates
    @lang/spec validator validate-estimates
  }
}

@doc "This node represents an active order"
type CarouselOrderNode : RootNode CarouselItemNode {
  orderStatus: OrderStatus
  baristaImage: Image[1..n]
  store: StoreNode
  orderPickUpTime: String // RFC3339 format.
}

enum OrderStatus {
  UNASSIGNED ASSIGNED READY CANCELLED
}

@lang/dot color olivedrab1
type ProductFlagNode : RootNode {
  icon: Image[1..n]
  name: String
}

enum RateType {
  HAPPY UNHAPPY
}

type RateNode : RootNode {
  order: OrderNode?
  rateType: RateType
}

type Feedback {
  comments: String
}

type OrderNode : RootNode {
  products: ProductNode[1..n]
  totalCount: Integer
  totalPrice: Float
  totalTax: Float
}

@lang/dot color lightgoldenrod1
@lang/lacinia identifier query
type QueryRoot {
  versions: Version[0..n] {
    @lang/lacinia resolver resolve-versions
  }
  node(id: ID): RootNode? {
    @lang/lacinia resolver resolve-node
  }
  stores(locationSearch: LocationSearchInput?): StoreNode[0..n] {
    @lang/lacinia resolver resolve-stores
  }
  cities: CityNode[0..n] {
    @lang/lacinia resolver resolve-cities
  }
  productsCatalog(storeId: ID?): ProductNode[0..n] {
    @lang/lacinia resolver resolve-products-catalog
  }
  customer: CustomerNode {
    @lang/lacinia resolver resolve-customer
  }
}

@lang/dot color indianred1
type MockEnv {
  spaceId: String
  env: String
  token: String
}

@lang/dot color indianred1
@lang/lacinia identifier mutation
type MockRoot {
  mockEnv(spaceId: String, env: String, token:String): MockEnv {
    @lang/lacinia resolver resolve-mock-env
  }
}

type CartNode: RootNode {
  products: ProductNode[0..n]
  totalProducts: Float
  totalTax: Float
  totalPrice: Float
}

@lang/lacinia identifier input
type CartItemInput {
  productId: ID
  variants: ID[0..n]
}

@lang/lacinia identifier mutation
type MutationRoot {
  updateCart(cartId: ID?, items: CartItemInput[0..n]): CartNode {
    @doc "Passing items with an empty list will reset given cartId. If cartId is not provided, server will create one."
    @lang/lacinia resolver resolve-cart-update
  }
  rateOrder(orderId: ID, rate: RateType): RateNode
  feedback(rateId: ID?, comments: String): Feedback
}

diagram products {
  (QueryRoot CustomerNode RootNode LocationSearchInput)
  (ProductNode CarouselItemNode CarouselRecommendationNode CarouselFavoriteNode CarouselOrderNode)!
}

diagram locations {
  (QueryRoot CustomerNode RootNode LocationSearchInput)
  (StoreNode CityNode)!
}
