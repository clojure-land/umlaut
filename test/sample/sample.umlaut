type Project {
  id: String
  name: String
  client: Client[0..1]
  sprints: Sprint[0..n]
}

type Client {
  id: String
  name: String
  projects: Project[0..n]
}

interface Ticket {
  title: String
  body: String[0..1]
  attachments: Attachment[0..n]
  observers: User[0..n]
  priority: Integer
  project: Project
  tags: Tag[0..n]
  module: Module[0..1]
}

type EpicTicket : Ticket {
  id: String
  children: ActionableTicket[0..n]
}

type ActionableTicket : Ticket Other {
  id: String
  assignee: User[0..1]
  severity: Severity[0..1]
  sprint: Sprint[0..1]
  type: ActionableTicketType
  stage: Stage[0..1]
  build: Build[0..1]
  parent: EpicTicket[0..1]
}

type Build {
  id: String
  name: String
  project: Project
}

type Module {
  id: String
  name: String
  project: Project
}

enum Severity {
  P0 P1 P2 P3 P4 P5
}

type Tag {
  id: String
  project: Project
  name: String
}

enum ActionableTicketType {
  Feature Bug ChangeOrder Task
}

enum Stage {
  Icebox
  DocumentationOnGoing
  ReadyForDevelopment
  InDevelopment
  InReview
  ReadyForQADeployment
  DeployedToQA // How to deploy to a certain version
  InQA
  ReadyForDeployment
  Deployed // How to deploy a certain version
}

type Sprint {
  id: String
  name: String
  startDate: DateTime[0..1]
  endDate: DateTime[0..1]
  order: Integer
  project: Project
}

type User {
  id: String
  name: String
}

type Attachment {
  id: String
  name: String
  path: String
}

diagram ForClient {
  (Client Project)
  (Ticket EpicTicket ActionableTicket)
  (User Attachment)
}

